/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type AdditionalDataHolder, type Guid, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface CategoryDto extends AdditionalDataHolder, Parsable {
    /**
     * The id property
     */
    id?: Guid | null;
    /**
     * The name property
     */
    name?: string | null;
}
export interface CreateCategoryCommand extends AdditionalDataHolder, Parsable {
    /**
     * The name property
     */
    name?: string | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CategoryDto}
 */
// @ts-ignore
export function createCategoryDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCategoryDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CreateCategoryCommand}
 */
// @ts-ignore
export function createCreateCategoryCommandFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCreateCategoryCommand;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CreateProductCommand}
 */
// @ts-ignore
export function createCreateProductCommandFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCreateProductCommand;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DeleteCategoryCommand}
 */
// @ts-ignore
export function createDeleteCategoryCommandFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDeleteCategoryCommand;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DeleteProductCommand}
 */
// @ts-ignore
export function createDeleteProductCommandFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDeleteProductCommand;
}
export interface CreateProductCommand extends AdditionalDataHolder, Parsable {
    /**
     * The categoryIds property
     */
    categoryIds?: Guid[] | null;
    /**
     * The description property
     */
    description?: string | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The price property
     */
    price?: number | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ProductDto}
 */
// @ts-ignore
export function createProductDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoProductDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UpdateCategoryCommand}
 */
// @ts-ignore
export function createUpdateCategoryCommandFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUpdateCategoryCommand;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UpdateProductCommand}
 */
// @ts-ignore
export function createUpdateProductCommandFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUpdateProductCommand;
}
export interface DeleteCategoryCommand extends AdditionalDataHolder, Parsable {
    /**
     * The id property
     */
    id?: Guid | null;
}
export interface DeleteProductCommand extends AdditionalDataHolder, Parsable {
    /**
     * The id property
     */
    id?: Guid | null;
}
/**
 * The deserialization information for the current model
 * @param CategoryDto The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCategoryDto(categoryDto: Partial<CategoryDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { categoryDto.id = n.getGuidValue(); },
        "name": n => { categoryDto.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param CreateCategoryCommand The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCreateCategoryCommand(createCategoryCommand: Partial<CreateCategoryCommand> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { createCategoryCommand.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param CreateProductCommand The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCreateProductCommand(createProductCommand: Partial<CreateProductCommand> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "categoryIds": n => { createProductCommand.categoryIds = n.getCollectionOfPrimitiveValues<Guid>(); },
        "description": n => { createProductCommand.description = n.getStringValue(); },
        "name": n => { createProductCommand.name = n.getStringValue(); },
        "price": n => { createProductCommand.price = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param DeleteCategoryCommand The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDeleteCategoryCommand(deleteCategoryCommand: Partial<DeleteCategoryCommand> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { deleteCategoryCommand.id = n.getGuidValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param DeleteProductCommand The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDeleteProductCommand(deleteProductCommand: Partial<DeleteProductCommand> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { deleteProductCommand.id = n.getGuidValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param ProductDto The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProductDto(productDto: Partial<ProductDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "categories": n => { productDto.categories = n.getCollectionOfObjectValues<CategoryDto>(createCategoryDtoFromDiscriminatorValue); },
        "description": n => { productDto.description = n.getStringValue(); },
        "id": n => { productDto.id = n.getGuidValue(); },
        "name": n => { productDto.name = n.getStringValue(); },
        "price": n => { productDto.price = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param UpdateCategoryCommand The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUpdateCategoryCommand(updateCategoryCommand: Partial<UpdateCategoryCommand> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { updateCategoryCommand.id = n.getGuidValue(); },
        "name": n => { updateCategoryCommand.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param UpdateProductCommand The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUpdateProductCommand(updateProductCommand: Partial<UpdateProductCommand> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "categoryIds": n => { updateProductCommand.categoryIds = n.getCollectionOfPrimitiveValues<Guid>(); },
        "description": n => { updateProductCommand.description = n.getStringValue(); },
        "id": n => { updateProductCommand.id = n.getGuidValue(); },
        "name": n => { updateProductCommand.name = n.getStringValue(); },
        "price": n => { updateProductCommand.price = n.getNumberValue(); },
    }
}
export interface ProductDto extends AdditionalDataHolder, Parsable {
    /**
     * The categories property
     */
    categories?: CategoryDto[] | null;
    /**
     * The description property
     */
    description?: string | null;
    /**
     * The id property
     */
    id?: Guid | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The price property
     */
    price?: number | null;
}
/**
 * Serializes information the current object
 * @param CategoryDto The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCategoryDto(writer: SerializationWriter, categoryDto: Partial<CategoryDto> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!categoryDto || isSerializingDerivedType) { return; }
    writer.writeGuidValue("id", categoryDto.id);
    writer.writeStringValue("name", categoryDto.name);
    writer.writeAdditionalData(categoryDto.additionalData);
}
/**
 * Serializes information the current object
 * @param CreateCategoryCommand The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCreateCategoryCommand(writer: SerializationWriter, createCategoryCommand: Partial<CreateCategoryCommand> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!createCategoryCommand || isSerializingDerivedType) { return; }
    writer.writeStringValue("name", createCategoryCommand.name);
    writer.writeAdditionalData(createCategoryCommand.additionalData);
}
/**
 * Serializes information the current object
 * @param CreateProductCommand The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCreateProductCommand(writer: SerializationWriter, createProductCommand: Partial<CreateProductCommand> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!createProductCommand || isSerializingDerivedType) { return; }
    writer.writeCollectionOfPrimitiveValues<Guid>("categoryIds", createProductCommand.categoryIds);
    writer.writeStringValue("description", createProductCommand.description);
    writer.writeStringValue("name", createProductCommand.name);
    writer.writeNumberValue("price", createProductCommand.price);
    writer.writeAdditionalData(createProductCommand.additionalData);
}
/**
 * Serializes information the current object
 * @param DeleteCategoryCommand The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDeleteCategoryCommand(writer: SerializationWriter, deleteCategoryCommand: Partial<DeleteCategoryCommand> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!deleteCategoryCommand || isSerializingDerivedType) { return; }
    writer.writeGuidValue("id", deleteCategoryCommand.id);
    writer.writeAdditionalData(deleteCategoryCommand.additionalData);
}
/**
 * Serializes information the current object
 * @param DeleteProductCommand The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDeleteProductCommand(writer: SerializationWriter, deleteProductCommand: Partial<DeleteProductCommand> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!deleteProductCommand || isSerializingDerivedType) { return; }
    writer.writeGuidValue("id", deleteProductCommand.id);
    writer.writeAdditionalData(deleteProductCommand.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param ProductDto The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProductDto(writer: SerializationWriter, productDto: Partial<ProductDto> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!productDto || isSerializingDerivedType) { return; }
    writer.writeCollectionOfObjectValues<CategoryDto>("categories", productDto.categories, serializeCategoryDto);
    writer.writeStringValue("description", productDto.description);
    writer.writeGuidValue("id", productDto.id);
    writer.writeStringValue("name", productDto.name);
    writer.writeNumberValue("price", productDto.price);
    writer.writeAdditionalData(productDto.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param UpdateCategoryCommand The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUpdateCategoryCommand(writer: SerializationWriter, updateCategoryCommand: Partial<UpdateCategoryCommand> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!updateCategoryCommand || isSerializingDerivedType) { return; }
    writer.writeGuidValue("id", updateCategoryCommand.id);
    writer.writeStringValue("name", updateCategoryCommand.name);
    writer.writeAdditionalData(updateCategoryCommand.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param UpdateProductCommand The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUpdateProductCommand(writer: SerializationWriter, updateProductCommand: Partial<UpdateProductCommand> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!updateProductCommand || isSerializingDerivedType) { return; }
    writer.writeCollectionOfPrimitiveValues<Guid>("categoryIds", updateProductCommand.categoryIds);
    writer.writeStringValue("description", updateProductCommand.description);
    writer.writeGuidValue("id", updateProductCommand.id);
    writer.writeStringValue("name", updateProductCommand.name);
    writer.writeNumberValue("price", updateProductCommand.price);
    writer.writeAdditionalData(updateProductCommand.additionalData);
}
export interface UpdateCategoryCommand extends AdditionalDataHolder, Parsable {
    /**
     * The id property
     */
    id?: Guid | null;
    /**
     * The name property
     */
    name?: string | null;
}
export interface UpdateProductCommand extends AdditionalDataHolder, Parsable {
    /**
     * The categoryIds property
     */
    categoryIds?: Guid[] | null;
    /**
     * The description property
     */
    description?: string | null;
    /**
     * The id property
     */
    id?: Guid | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The price property
     */
    price?: number | null;
}
/* tslint:enable */
/* eslint-enable */
