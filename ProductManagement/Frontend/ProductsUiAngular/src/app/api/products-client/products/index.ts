/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createProductDtoFromDiscriminatorValue, serializeCreateProductCommand, serializeDeleteProductCommand, serializeUpdateProductCommand, type CreateProductCommand, type DeleteProductCommand, type ProductDto, type UpdateProductCommand } from '../models/index.js';
// @ts-ignore
import { ProductsItemRequestBuilderRequestsMetadata, type ProductsItemRequestBuilder } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Guid, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /products
 */
export interface ProductsRequestBuilder extends BaseRequestBuilder<ProductsRequestBuilder> {
    /**
     * Gets an item from the productsapi.client.products.item collection
     * @param id Unique identifier of the item
     * @returns {ProductsItemRequestBuilder}
     */
     byId(id: Guid) : ProductsItemRequestBuilder;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     delete(body: DeleteProductCommand, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ProductDto[]>}
     */
     get(requestConfiguration?: RequestConfiguration<ProductsRequestBuilderGetQueryParameters> | undefined) : Promise<ProductDto[] | undefined>;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Guid>}
     */
     post(body: CreateProductCommand, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Guid | undefined>;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ArrayBuffer>}
     */
     put(body: UpdateProductCommand, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ArrayBuffer | undefined>;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(body: DeleteProductCommand, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ProductsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: CreateProductCommand, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPutRequestInformation(body: UpdateProductCommand, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
export interface ProductsRequestBuilderGetQueryParameters {
    ascending?: boolean;
    orderBy?: string;
    pageNumber?: number;
    pageSize?: number;
    searchTerm?: string;
}
/**
 * Uri template for the request builder.
 */
export const ProductsRequestBuilderUriTemplate = "{+baseurl}/products{?Ascending*,OrderBy*,PageNumber*,PageSize*,SearchTerm*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ProductsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "ascending": "Ascending",
    "orderBy": "OrderBy",
    "pageNumber": "PageNumber",
    "pageSize": "PageSize",
    "searchTerm": "SearchTerm",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ProductsRequestBuilderNavigationMetadata: Record<Exclude<keyof ProductsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byId: {
        requestsMetadata: ProductsItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ProductsRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: ProductsRequestBuilderUriTemplate,
        adapterMethodName: "sendNoResponseContent",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeDeleteProductCommand,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
    get: {
        uriTemplate: ProductsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "sendCollection",
        responseBodyFactory:  createProductDtoFromDiscriminatorValue,
        queryParametersMapper: ProductsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: ProductsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "sendPrimitive",
        responseBodyFactory:  "string",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCreateProductCommand,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
    put: {
        uriTemplate: ProductsRequestBuilderUriTemplate,
        adapterMethodName: "sendPrimitive",
        responseBodyFactory:  "ArrayBuffer",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeUpdateProductCommand,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
