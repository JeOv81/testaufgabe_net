/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createCategoryDtoFromDiscriminatorValue, serializeCreateCategoryCommand, serializeDeleteCategoryCommand, serializeUpdateCategoryCommand, type CategoryDto, type CreateCategoryCommand, type DeleteCategoryCommand, type UpdateCategoryCommand } from '../models/index.js';
// @ts-ignore
import { CategoriesItemRequestBuilderRequestsMetadata, type CategoriesItemRequestBuilder } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Guid, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /categories
 */
export interface CategoriesRequestBuilder extends BaseRequestBuilder<CategoriesRequestBuilder> {
    /**
     * Gets an item from the productsapi.client.categories.item collection
     * @param id Unique identifier of the item
     * @returns {CategoriesItemRequestBuilder}
     */
     byId(id: Guid) : CategoriesItemRequestBuilder;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     delete(body: DeleteCategoryCommand, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<CategoryDto[]>}
     */
     get(requestConfiguration?: RequestConfiguration<CategoriesRequestBuilderGetQueryParameters> | undefined) : Promise<CategoryDto[] | undefined>;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Guid>}
     */
     post(body: CreateCategoryCommand, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Guid | undefined>;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ArrayBuffer>}
     */
     put(body: UpdateCategoryCommand, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ArrayBuffer | undefined>;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(body: DeleteCategoryCommand, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<CategoriesRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: CreateCategoryCommand, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPutRequestInformation(body: UpdateCategoryCommand, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
export interface CategoriesRequestBuilderGetQueryParameters {
    searchTerm?: string;
}
/**
 * Uri template for the request builder.
 */
export const CategoriesRequestBuilderUriTemplate = "{+baseurl}/categories{?SearchTerm*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const CategoriesRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "searchTerm": "SearchTerm",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const CategoriesRequestBuilderNavigationMetadata: Record<Exclude<keyof CategoriesRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byId: {
        requestsMetadata: CategoriesItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const CategoriesRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: CategoriesRequestBuilderUriTemplate,
        adapterMethodName: "sendNoResponseContent",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeDeleteCategoryCommand,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
    get: {
        uriTemplate: CategoriesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "sendCollection",
        responseBodyFactory:  createCategoryDtoFromDiscriminatorValue,
        queryParametersMapper: CategoriesRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: CategoriesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "sendPrimitive",
        responseBodyFactory:  "string",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCreateCategoryCommand,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
    put: {
        uriTemplate: CategoriesRequestBuilderUriTemplate,
        adapterMethodName: "sendPrimitive",
        responseBodyFactory:  "ArrayBuffer",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeUpdateCategoryCommand,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
